swagger: "2.0"
info:
  description: "MeetingBook is a standalone Calendly like application to manage appointments and share them with guests so that they can book the appointment."
  version: "1.0.0"  
  title: "MeetingBook"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
externalDocs:
  description: "Project Source"
  url: "https://github.com/meetingbook/meetingbook"
host: "localhost:5000"
basePath: "/"
schemes:
- "https"
- "http"
securityDefinitions:
  basic_auth:
    type: basic
paths:
  /admin:
    get:
      description: Test API endpoint
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: |
            Authorization header contains the Basic word followed by a space 
            and a base64-encoded username:password string.
            For example, a header containing the "admin" and "Pyth0n" credentials would be encoded as "Authorization: Basic YWRtaW46UHl0aDBu"
      security:
        - basic_auth: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful admin request"
  /registration:
    post:
      summary: Register a new Admin
      description: Requires a new email (not yet registered in MeetingBook), password and the second input of this password to confirm the registration of a new Admin.
      consumes:
        - application/json
      parameters:
        - in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/RegistrationBody'
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful registration"
        "400":
           description: "Bad request. This is not a valid email or passwords are different"
           schema:
             $ref: '#/definitions/Problem'
        "409":
          description: "Conflict. This email is already registered in MeetingBook"
          schema:
            $ref: '#/definitions/Problem'
  /login:
    get:
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: |
            Authorization header contains the Basic word followed by a space 
            and a base64-encoded username:password string.
            For example, a header containing the demo and p@55w0rd credentials 
            would be encoded as "Authorization: Basic ZGVtbzpwQDU1dzByZA=="
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful login"
        "401":
          description: "Unauthorized"
  /schedule:
    get:
      parameters:
        - in: query
          name: filter
          type: string
          description: |
            Filter "free or booking". 
            To get **free** slots: `/schedule/filter=status="free"` 
            
            To get **booked** slots: `/schedule/filter=status="booking"`
        - in: query
          name: week
          type: string
          description: |
            To get slots for a given week.
            `/schedule/week=2021-01-01`
            
            To get booking slots for a given week.
            `/schedule/week=2021-01-01&filter=status="booking"`
        - in: query
          name: day
          type: string
          description: |
            To get slots for a given day.
            `/schedule/day=2021-01-01`
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Schedule"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      security:
        - basic_auth: []
    post:
      summary: Add a new interval
      description: |
            request to add a new free interval for the admin. Format:
            `/schedule/start=2021-02-02T10:00&end=2021-02-02T14:00`
           
      parameters:
        - in: query
          name: start
          type: string
          required: true
          description: |
            Start interval in format: `start=2021-02-02T10:00`
        - in: query
          name: end
          type: string
          required: true
          description: |
            End interval in format: `end=2021-02-02T10:00`
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Slot"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      security:
        - basic_auth: []      
  /bookings/{booking_id}:
    get:
      parameters:
        - in: path
          name: booking_id
          type: string
          description: |
            Receives the `"booking_id"` of the booked slot, and sends a response with information about users booked this slot(name, email, topic)
              `/booking/{booking_id}`
          required: true  
      responses:
        "200":
          description: "Successful request"
          schema:
            $ref: "#/definitions/Booking"
definitions:
  RegistrationBody:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  Schedule:
    type: "object"
    properties:
      slots:
        type: array
        items:
          $ref: "#/definitions/Slot"
  Admin:
    type: "object"
    required:
      - id
      - email
      - password
      - avatar
    properties:
      id:
        type: "integer"
        format: "int64"
      email:
        type: "string"
      password:
        type: "string"
        description: "Hashed and salted password"
      avatar:
        type: "string"
        format: "base64"
        description: "Admins avatar"
  Slot:
    type: "object"
    required:
      - id
      - start
      - end
      - status
      - booking_id
    properties:
      id:
        type: "integer"
        format: "int64"
      start:
        type: "string"
        format: "date-time"
        description: "Start of the slot. Defined as Datetime string in ISO 8601 https://en.wikipedia.org/wiki/ISO_8601"
      end:
        type: "string"
        format: "date-time"
        description: "End of the slot. Defined as Datetime string in ISO 8601 https://en.wikipedia.org/wiki/ISO_8601"
      status:
        type: "string"
        enum:
        - "booked"
        - "available"
        description: "Status of a slot"
      booking_id: 
        type: "integer"
        format: "int64"
        description: "ID reference to booking"
  Booking:
    type: "object"
    required:
      - id
      - guest_name
      - guest_email
    properties:
      id:
        type: "integer"
        format: "int64"
      guest_name:
        type: "string"
        description: "Guest name who makes a booking"
      guest_email:
        type: "string"
        description: "Guest email who makes a booking"
      topic:
        type: "string"
        description: "Topic to discuss"
  Problem:
    type: object
    properties:
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence
          of the problem.
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out

